/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hms.pro;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.Year;
import java.time.format.DateTimeFormatter;
import javax.imageio.ImageIO;
import javax.swing.JComponent;
import javax.swing.JOptionPane;



/**
 *
 * @author lt1
 */
public class Payments extends javax.swing.JPanel {
    int clientNum = 0;
    int resNewNum = 0;
    int txnNum = 0;
    int errD1 = 0;
    int errD2 = 0;
    int errR1 = 0;
    int errRm = 0;
    int errC1  = 0;
    DecimalFormat formatter = new DecimalFormat("#,##0.00");
    
    /**
     * Creates new form Payments
     */
    public Payments() {
        initComponents();
        popTypes();
        ResDis();
        String str = "0.00";
        txtResID1.setVisible(false);
        txtClientID.setVisible(false);
        txttxnID.setVisible(false);
        

        // Convert string to BigDecimal and format as
        // currency
        BigDecimal amt = new BigDecimal(str);
        String currStr = formatter.format(amt);
        txtAmnt.setText (currStr);
        taInv.setBorder(null);
        
        try{
            Statement s19 = db1.mycon1().createStatement();
            ResultSet rs15 =  s19.executeQuery("SELECT blilcycl.BillingCycl_id, blilcycl.Date_Run, blilcycl.ResevBilld, blilcycl.BillLogg, blilcycl.V1, blilcycl.V2, blilcycl.V3, blilcycl.LastRun FROM blilcycl ;");
            rs15.last();
            txtLastRun.setText( rs15.getString(2).toString());
            
            rs15.close();
        }catch(SQLException billy){
            
            
        }
        
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Payments().setVisible(true);
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lineBorder1 = (javax.swing.border.LineBorder)javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0));
        btnConPay = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblPayments = new javax.swing.JTable();
        txtAmnt = new javax.swing.JTextField();
        txtNotes = new javax.swing.JTextField();
        cmbbType = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblClient = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtNamedis = new javax.swing.JTextField();
        txtRoomdis = new javax.swing.JTextField();
        txtResid = new javax.swing.JTextField();
        txtPaySearch = new javax.swing.JTextField();
        btnSearchGuests = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnRefreshDis = new javax.swing.JButton();
        panInv = new javax.swing.JPanel();
        txtChkin = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtChkout = new javax.swing.JTextField();
        txtResID = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtNamed = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtRate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtroom = new javax.swing.JTextField();
        txtInvNoDis = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtDateDis = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        taInv = new javax.swing.JTextPane();
        txtClientID = new javax.swing.JTextField();
        txtResID1 = new javax.swing.JTextField();
        txttxnID = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtLastRun = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnConPay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/img/invo.png"))); // NOI18N
        btnConPay.setText("PAY");
        btnConPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConPayActionPerformed(evt);
            }
        });
        add(btnConPay, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 490, 110, 70));

        jtblPayments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Reservation", "Surname", "Name", "Room", "From", "To", "Notes", "Created", "Status", "Reference", "ClientNo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblPayments.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jtblPayments.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtblPayments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblPaymentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtblPayments);
        if (jtblPayments.getColumnModel().getColumnCount() > 0) {
            jtblPayments.getColumnModel().getColumn(0).setResizable(false);
            jtblPayments.getColumnModel().getColumn(0).setPreferredWidth(4);
            jtblPayments.getColumnModel().getColumn(1).setResizable(false);
            jtblPayments.getColumnModel().getColumn(1).setPreferredWidth(40);
            jtblPayments.getColumnModel().getColumn(2).setResizable(false);
            jtblPayments.getColumnModel().getColumn(2).setPreferredWidth(40);
            jtblPayments.getColumnModel().getColumn(3).setResizable(false);
            jtblPayments.getColumnModel().getColumn(3).setPreferredWidth(6);
            jtblPayments.getColumnModel().getColumn(4).setResizable(false);
            jtblPayments.getColumnModel().getColumn(4).setPreferredWidth(34);
            jtblPayments.getColumnModel().getColumn(5).setResizable(false);
            jtblPayments.getColumnModel().getColumn(5).setPreferredWidth(34);
            jtblPayments.getColumnModel().getColumn(6).setResizable(false);
            jtblPayments.getColumnModel().getColumn(6).setPreferredWidth(45);
            jtblPayments.getColumnModel().getColumn(7).setResizable(false);
            jtblPayments.getColumnModel().getColumn(7).setPreferredWidth(26);
            jtblPayments.getColumnModel().getColumn(8).setResizable(false);
            jtblPayments.getColumnModel().getColumn(8).setPreferredWidth(4);
            jtblPayments.getColumnModel().getColumn(9).setResizable(false);
            jtblPayments.getColumnModel().getColumn(10).setResizable(false);
            jtblPayments.getColumnModel().getColumn(10).setPreferredWidth(21);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 1070, 270));

        txtAmnt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAmnt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtAmnt.setText("0.00");
        txtAmnt.setActionCommand("<Not Set>");
        txtAmnt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAmntFocusLost(evt);
            }
        });
        txtAmnt.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtAmntInputMethodTextChanged(evt);
            }
        });
        txtAmnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAmntActionPerformed(evt);
            }
        });
        add(txtAmnt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 490, 80, 30));

        txtNotes.setToolTipText("Notes");
        add(txtNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 530, 280, 30));

        cmbbType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbbType.setName(""); // NOI18N
        cmbbType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbbTypeItemStateChanged(evt);
            }
        });
        add(cmbbType, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 490, 150, 30));

        jLabel1.setText("Client");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 450, 50, 30));

        jLabel2.setText("Room");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 410, -1, 30));

        lblClient.setText("Reservation");
        add(lblClient, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 69, 30));

        jLabel5.setText("Enter Amount €");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 490, 90, 30));

        jLabel6.setText("Type");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 490, 40, 30));

        jLabel7.setText("Payment Note");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 530, 80, 30));

        txtNamedis.setEditable(false);
        txtNamedis.setCaretColor(new java.awt.Color(204, 204, 204));
        txtNamedis.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        add(txtNamedis, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 450, 218, 30));

        txtRoomdis.setEditable(false);
        txtRoomdis.setCaretColor(new java.awt.Color(204, 204, 204));
        txtRoomdis.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtRoomdis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRoomdisActionPerformed(evt);
            }
        });
        add(txtRoomdis, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 410, 47, 30));

        txtResid.setEditable(false);
        txtResid.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtResid.setEnabled(false);
        add(txtResid, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 410, 88, 30));
        add(txtPaySearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, 210, 30));

        btnSearchGuests.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/img/search x30.png"))); // NOI18N
        btnSearchGuests.setText("Search Clients");
        btnSearchGuests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchGuestsActionPerformed(evt);
            }
        });
        add(btnSearchGuests, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 330, -1, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("PAYMENTS");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 0, 123, 33));

        btnRefreshDis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/img/update.png"))); // NOI18N
        btnRefreshDis.setText("Clear Search");
        btnRefreshDis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshDisActionPerformed(evt);
            }
        });
        add(btnRefreshDis, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, 130, 30));

        panInv.setBackground(new java.awt.Color(255, 255, 255));
        panInv.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtChkin.setEditable(false);
        txtChkin.setBorder(null);
        panInv.add(txtChkin, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, 90, -1));

        jLabel8.setText("Check Out:");
        panInv.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 120, -1, -1));

        txtChkout.setEditable(false);
        txtChkout.setBorder(null);
        panInv.add(txtChkout, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, 90, -1));

        txtResID.setEditable(false);
        txtResID.setAutoscrolls(false);
        txtResID.setBorder(null);
        txtResID.setFocusable(false);
        txtResID.setRequestFocusEnabled(false);
        txtResID.setVerifyInputWhenFocusTarget(false);
        panInv.add(txtResID, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 50, -1));

        jLabel13.setText("Check In:");
        panInv.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, 60, -1));

        jLabel9.setText("Name:");
        panInv.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 40, -1));

        jLabel17.setText("Reservation:");
        panInv.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 70, -1));

        txtNamed.setEditable(false);
        txtNamed.setBorder(null);
        panInv.add(txtNamed, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 180, -1));

        jLabel16.setText("Rate  €");
        panInv.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 40, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Weekly Rate");
        panInv.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, 130, -1));

        txtRate.setEditable(false);
        txtRate.setBorder(null);
        panInv.add(txtRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 140, 80, -1));

        jLabel11.setText("Room:");
        panInv.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 40, -1));

        txtroom.setEditable(false);
        txtroom.setBorder(null);
        txtroom.setOpaque(true);
        panInv.add(txtroom, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 50, -1));

        txtInvNoDis.setEditable(false);
        txtInvNoDis.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtInvNoDis.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtInvNoDis.setBorder(null);
        txtInvNoDis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInvNoDisActionPerformed(evt);
            }
        });
        panInv.add(txtInvNoDis, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 50, 110, 20));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("RECIEPT");
        panInv.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, -1, -1));

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/img/Logo.png"))); // NOI18N
        jLabel12.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        panInv.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 180, 80));

        txtDateDis.setEditable(false);
        txtDateDis.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtDateDis.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDateDis.setBorder(null);
        txtDateDis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateDisActionPerformed(evt);
            }
        });
        panInv.add(txtDateDis, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 80, 30));

        taInv.setEditable(false);
        taInv.setBackground(new java.awt.Color(255, 255, 255));
        taInv.setBorder(null);
        taInv.setAutoscrolls(false);
        taInv.setCaretColor(new java.awt.Color(204, 204, 204));
        taInv.setDisabledTextColor(new java.awt.Color(0, 102, 102));
        taInv.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jScrollPane3.setViewportView(taInv);

        panInv.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 470, 420));

        add(panInv, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 330, 540, 590));

        txtClientID.setEditable(false);
        txtClientID.setAutoscrolls(false);
        txtClientID.setFocusable(false);
        txtClientID.setRequestFocusEnabled(false);
        txtClientID.setVerifyInputWhenFocusTarget(false);
        add(txtClientID, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 580, 70, 30));

        txtResID1.setEditable(false);
        txtResID1.setAutoscrolls(false);
        txtResID1.setFocusable(false);
        txtResID1.setRequestFocusEnabled(false);
        txtResID1.setVerifyInputWhenFocusTarget(false);
        add(txtResID1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 580, 70, 30));

        txttxnID.setEditable(false);
        txttxnID.setAutoscrolls(false);
        txttxnID.setFocusable(false);
        txttxnID.setRequestFocusEnabled(false);
        txttxnID.setVerifyInputWhenFocusTarget(false);
        add(txttxnID, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 580, 70, 30));

        jLabel14.setText("Charges Last Applied:");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 620, 130, 30));

        txtLastRun.setEditable(false);
        txtLastRun.setEnabled(false);
        add(txtLastRun, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 620, 200, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnConPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConPayActionPerformed
        try{
            
            
            
            if (((txtClientID.getText().isEmpty()) != true) && ((Integer.valueOf(txtClientID.getText()) != 0))){
            resNewNum = 0;
            int txnsgurmno = 0;
            int txnsresvno = 0;
            int txnsgno = 0;
            String txnsCki  = "";
            String txnsamtpay = "0.00";
            String txnsCko  = "";
            String txnstype = "";
            String txnsdetails = "";
            String txnNotes = "";
            Statement s19 = db1.mycon1().createStatement();
            ResultSet rs15 =  s19.executeQuery("SELECT txns.tx_id, txns.created, txns.type, txns.resv_no, txns.gu_rm_no, txns.gue_no, txns.rm_no, txns.details, txns.amtpay, txns.meth FROM txns ;");
            rs15.beforeFirst();
            while (rs15.next()){
                txnNum = txnNum + 1;
            }rs15.close();
            //txnNum = txnNum + 1;
            txttxnID.setText(String.valueOf(txnNum));
            
            String creTme = LocalDate.now().getYear()+"-"+ LocalDate.now().getMonthValue() +"-" +LocalDate.now().getDayOfMonth();
           
            int txnstxid = txnNum; 
            txtInvNoDis.setText(String.valueOf(txnNum));
            String txnscreated = creTme; 
            txnstype = "Payment"; 
            
            String txnsmeth = String.valueOf(cmbbType.getSelectedItem());///// user entry below
            
            if ((txtroom.getText().isEmpty() != true) && (Integer.parseInt(txtroom.getText()) != 0)){
                txnsgurmno =  Integer.parseInt(txtroom.getText()); 
            }
            else{
                errRm = 1;            
            }
            if ((txtResid.getText().isEmpty() != true) ){
                txnsresvno =  Integer.parseInt(txtResid.getText()); 
            }
            else{
                errRm = 1;            
            }
            if ((txtClientID.getText().isEmpty() != true ) ){
                 txnsgno = Integer.parseInt(txtClientID.getText()); 
            }
            else{
                errC1 =1;            
            }
            if ((txtAmnt.getText().isEmpty() != true )){
                 txnsamtpay = String.valueOf(txtAmnt.getText()); 
                 txtRate.setText(String.valueOf(txtAmnt.getText()));
                 
            }
            else{
                errR1 =1;            
            }
            if (txtNotes.getText().isEmpty() != true ){
                 txnNotes = (txtNotes.getText().toString()); 
            }
            
            
            if ((errR1 == 0) && (errC1 ==0) && (errRm == 0) && (errD1 == 0) && (errD2 == 0)){
               
            txnsdetails = ("LOG: " + txtResid.getText() + ": " + txtClientID.getText() + ": " + txtChkin.getText() + ": " + String.valueOf(txnsgurmno) + ": " + txtChkout.getText() + ": " + txtNotes.getText() + ": 0: 3: " + String.valueOf(creTme) + ": "+ String.valueOf(txnstxid) +": " + String.valueOf(txnsamtpay) + ": " + String.valueOf(txnstxid) + ": "+ String.valueOf(txnscreated) + ": " + String.valueOf(txnstype) + ": " + String.valueOf(txnsresvno) + ": " + String.valueOf(txnsgurmno) + ": "+ String.valueOf(txnsgno) + ": " + String.valueOf(txnsgurmno) + ": "+ String.valueOf(txnsdetails) + ":  " + String.valueOf(txnsamtpay) + ": "+ String.valueOf(txnsmeth)    + ":EOL:") ;
            String txnAdd1 = ("INSERT INTO txns ( txns.tx_id, txns.created, txns.type, txns.resv_no, txns.gu_rm_no, txns.gue_no, txns.rm_no, txns.details, txns.amtpay, txns.meth ) VALUES ");
            String txnAdd2 = ("('" + String.valueOf(txnstxid) + "', '"+ String.valueOf(txnscreated) + "', '" + String.valueOf(txnstype) + "', '" + txnsresvno + "', '" + String.valueOf(txnsgurmno) + "', '"+ String.valueOf(txnsgno) + "', '" + String.valueOf(txnsgurmno) + "', '"+ String.valueOf(txnsdetails) + "',  '" + String.valueOf(txnsamtpay) + "', '"+ String.valueOf(txnsmeth)    + "');");
            String toDB2 = txnAdd1 + txnAdd2;
            
            
            taInv.setText( "----------------------------------------------------------------------------------------------------------\n");
            taInv.setText(taInv.getText()+"\t  Date \t Type \t Method \t Amount\n");
            taInv.setText(taInv.getText()+"----------------------------------------------------------------------------------------------------------\n");
            taInv.setText(taInv.getText()+"\t  " + LocalDate.now().getDayOfMonth() +"/"+ LocalDate.now().getMonthValue() +"/" + LocalDate.now().getYear() + "\t " + (String.valueOf(txnstype)) + "\t " + (String.valueOf(txnsmeth)) + "\t €" + (String.valueOf(txnsamtpay)) + "\n");
           
            taInv.setText(taInv.getText()+"\n\n\n----------------------------------------------------------------------------------------------------------\n");
           
              //Add Record to db
            Statement s99 = db1.mycon1().createStatement();
            
            try { 
                
                s99.executeUpdate(toDB2);
            } catch (SQLException e) { 
                JOptionPane.showMessageDialog(null, "TXN update error","D'oh", JOptionPane.ERROR_MESSAGE);
            }          s99.close();
            
           
            try {
                    printComponentToPrinter(panInv, true);
                
            } catch (PrinterException exp) {
                 JOptionPane.showMessageDialog(null, "Printing Error","Missing Data Errors" , JOptionPane.ERROR_MESSAGE);
            }
                
            }else{
                String errStr1 = "Rate: "+errR1+" Clinet: "+ errC1 + " Room: " + errRm + " In: " + errD1+ " Out: " + errD2 + ".";
                JOptionPane.showMessageDialog(null, errStr1.toString(),"Missing Data Errors" , JOptionPane.ERROR_MESSAGE);
                    
            }
        
          }// if res id
        }catch (SQLException se){
      
            JOptionPane.showMessageDialog(null, "NOPE!","Hey!", JOptionPane.ERROR_MESSAGE);
      
        }
        
        
        this.validate();
        clientNum = 0;
        resNewNum = 0;
        txnNum = 0;
        errD1 = 0;
        errD2 = 0;
        errR1 = 0;
        errRm = 0;
        errC1  = 0;
        txtResid.setText("");
        txtRoomdis.setText("");
        txtNamedis.setText("");
        txtAmnt.setText("0.00");
        txtNotes.setText("");
        txtClientID.setText("");
        cmbbType.setSelectedIndex(0);
    }//GEN-LAST:event_btnConPayActionPerformed

    private void jtblPaymentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblPaymentsMouseClicked
        // TODO add your handling code here:
        
        
        int row = jtblPayments.rowAtPoint(evt.getPoint());
        if (row >= 0 && evt.getClickCount() == 1) { // Double-click detected
           
            txtNamedis.setText((jtblPayments.getValueAt(row, 2).toString()) + " " +(jtblPayments.getValueAt(row, 1).toString()));
            txtRoomdis.setText((jtblPayments.getValueAt(row, 3).toString()));
            txtResid.setText((jtblPayments.getValueAt(row, 0).toString()));
            txtClientID.setText((jtblPayments.getValueAt(row, 10).toString()));
            //Reciept display
            popRate();
            txtNamed.setText((jtblPayments.getValueAt(row, 2).toString()) + " " +(jtblPayments.getValueAt(row, 1).toString()));
            txtChkin.setText((jtblPayments.getValueAt(row, 4).toString()));
            txtChkout.setText((jtblPayments.getValueAt(row, 5).toString()));
            txtRate.setText(txtAmnt.getText().toString());
            txtroom.setText((jtblPayments.getValueAt(row, 3).toString()));
            txtResID.setText(txtResid.getText().toString());
          
            txtDateDis.setText((LocalDate.now().getDayOfMonth() +"/"+ LocalDate.now().getMonthValue() +"/" + LocalDate.now().getYear()));
        }
            
       
    }//GEN-LAST:event_jtblPaymentsMouseClicked

    private void popRate(){
            try{
                
            Statement s39 = db1.mycon1().createStatement();
            //                                                  1                   2                       3                           4                   5                       6                       7                       8                       9                  10                   11                           
            ResultSet rs35 =  s39.executeQuery("SELECT reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge FROM reservations WHERE ( (reservations.res_id ='" + txtResid.getText().toString() + "'));");
            rs35.last();
            
            txtAmnt.setText(rs35.getString(11));
            rateConv();
            rs35.close();

            }
            catch(SQLException esw){
                JOptionPane.showMessageDialog(null, "Rate Entry Error" ,"Missing Data Errors"  , JOptionPane.ERROR_MESSAGE);
            }
            
}


    private void txtRoomdisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRoomdisActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtRoomdisActionPerformed

    private void txtAmntInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtAmntInputMethodTextChanged
        // TODO add your handling code here:
       
    }//GEN-LAST:event_txtAmntInputMethodTextChanged

    private void txtAmntFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAmntFocusLost
        // TODO add your handling code here:
        rateConv();
        
    }//GEN-LAST:event_txtAmntFocusLost

    private void rateConv(){
    String str = txtAmnt.getText();
        boolean isNumeric = false;
        try {  
            Double.parseDouble(str);  
            isNumeric =  true;
        } catch(NumberFormatException e){  
            isNumeric =  false;  
        }  
      
        
        if (isNumeric == true) {
            DecimalFormat formatter = new DecimalFormat("#,##0.00");
            BigDecimal amt = new BigDecimal(str);
            String currStr = formatter.format(amt);
            txtAmnt.setText (currStr);
        }else{
            str = "0.00";
            DecimalFormat formatter = new DecimalFormat("#,##0.00");
            BigDecimal amt = new BigDecimal(str);
            String currStr = formatter.format(amt);
            txtAmnt.setText (currStr);
        }
    
    
    }
    
    
    private void cmbbTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbbTypeItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmbbTypeItemStateChanged

    private void btnSearchGuestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchGuestsActionPerformed
        // TODO add your handling code here:
        
        ResDis2();
        
        
    }//GEN-LAST:event_btnSearchGuestsActionPerformed

    private void txtAmntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAmntActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmntActionPerformed

    private void btnRefreshDisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshDisActionPerformed
        // TODO add your handling code here:
        ResDis();
        txtPaySearch.setText("");
    }//GEN-LAST:event_btnRefreshDisActionPerformed

    private void txtInvNoDisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInvNoDisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInvNoDisActionPerformed

    private void txtDateDisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateDisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateDisActionPerformed
   
    
    public void popTypes(){
                  
         try {
	        
             Statement s = db1.mycon1().createStatement();
             ResultSet rs =  s.executeQuery("SELECT * FROM paytypes");
          
	        // Clear the existing items in the ComboBox
	        cmbbType.removeAllItems();
	        
	        // Loop through the results and add them to the ComboBox
	        while (rs.next()) {
	            cmbbType.addItem(rs.getString(2));
	        }
                
	        
	        // Close the database connection
	        //db1.mycon1.close();w
	    } catch (SQLException e) {
	        // Log the error
	        System.out.println("Error: " + e.getMessage());
	    }
         
      
    }
    
    public void ResDis(){
        try {
          
          DefaultTableModel dt1 = (DefaultTableModel) jtblPayments.getModel();
          dt1.setRowCount(0);
          String Sdate = LocalDate.now().getYear()+"/"+ LocalDate.now().getMonthValue() +"/" +LocalDate.now().getDayOfMonth();
            int tYerr = Year.now().getValue();
            String Edate = (tYerr + 1) + "/12/31";
          Statement s = db1.mycon1().createStatement();
          //                                                    1               2               3                       4                        5                      6                       7                   8                       9                   10                  11  
          ResultSet rs =  s.executeQuery("SELECT reservations.res_id, guests.LastName, guests.FirstName, reservations.room_no, reservations.date_start, reservations.date_end, reservations.notes, reservations.date_resmade, reservations.status, reservations.guest_id, guests.ID, guests.Reference, guests.LastDate FROM guests INNER JOIN reservations ON guests.ID = reservations.guest_id WHERE ((((reservations.date_start) <= '" + Edate + "') ) AND  ((reservations.date_end) >= '" + Sdate + "') );");
          
            while (rs.next()) {              
           
                Vector v = new Vector();    
                v.add(rs.getString(1));
                v.add(rs.getString(2));
                v.add(rs.getString(3));
                v.add(rs.getString(4));
                v.add(rs.getString(5));
                v.add(rs.getString(6));
                v.add(rs.getString(7));
                v.add(rs.getString(8));
                v.add(rs.getString(9));
                v.add(rs.getString(12));
                v.add(rs.getString(10));
                dt1.addRow(v);
              
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
    }
    
    public void ResDis2(){
        try {
          String serchName = txtPaySearch.getText();
          DefaultTableModel dt1 = (DefaultTableModel) jtblPayments.getModel();
          dt1.setRowCount(0);
          String Sdate = LocalDate.now().getYear()+"-"+ LocalDate.now().getMonthValue() +"-" +LocalDate.now().getDayOfMonth();
            int tYerr = Year.now().getValue();
            String Edate = (tYerr + 1) + "-12-31";
          Statement s = db1.mycon1().createStatement();
          ResultSet rs =  s.executeQuery("SELECT reservations.res_id, guests.LastName, guests.FirstName, reservations.room_no, reservations.date_start, reservations.date_end, reservations.notes, reservations.date_resmade, reservations.status, reservations.guest_id, guests.ID, guests.Reference, guests.LastDate FROM guests INNER JOIN reservations ON guests.ID = reservations.guest_id WHERE ((((reservations.date_start) <= '" + Edate + "') ) AND  ((reservations.date_end) >= '" + Sdate + "') );");
          
            while (rs.next()) {              
           
                Vector v = new Vector();    
                v.add(rs.getString(1));
                v.add(rs.getString(2));
                v.add(rs.getString(3));
                v.add(rs.getString(4));
                v.add(rs.getString(5));
                v.add(rs.getString(6));
                v.add(rs.getString(7));
                v.add(rs.getString(8));
                v.add(rs.getString(9));
                v.add(rs.getString(12));
                v.add(rs.getString(10));
            
                dt1.addRow(v);
              
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
    }
    
    //Printing 
    
    public static void printComponentToPrinter(JComponent comp, boolean fill) throws PrinterException {  
        String fileLoc = "";
        Paper paper = new Paper();
        paper.setSize(595, 842);
        paper.setImageableArea(1, 1, 595, 872);
        
        PageFormat pf = new PageFormat();
        pf.setPaper(paper);
       
        BufferedImage img = new BufferedImage(595, 872 ,BufferedImage.SCALE_SMOOTH);

        Graphics2D g2d = img.createGraphics();
        g2d.translate(pf.getImageableX(),pf.getImageableY());
        g2d.scale(1.2, 1);
        
        
        //Graphics2D graphics2D = img.getWidth()
        ComponentPrinter cp = new ComponentPrinter(comp, fill);
        PrinterJob  printJob = PrinterJob.getPrinterJob();

        printJob.setPrintable(cp);
        if(printJob.printDialog()) {
                printJob.print();
            }
            
        
        
        
        
        try {
            cp.print(g2d, pf, 0);
            
            
        } finally {
            g2d.dispose();
        }

        try {
            ImageIO.write(img, "png", new File("INVOICE_" + (LocalDate.now().format(DateTimeFormatter.ISO_DATE))   +".png"));
            fileLoc = ("INVOICE_" + (LocalDate.now().getDayOfMonth() +"-"+ LocalDate.now().getMonthValue() +"-" + LocalDate.now().getYear())   +".png");
        } catch (IOException ex) {
            ex.printStackTrace();
        } 
       
            
        
    }
    
    public static class ComponentPrinter implements Printable {

        private JComponent comp;
        private boolean fill;

        public ComponentPrinter(JComponent comp, boolean fill) {
            this.comp = comp;
            this.fill = fill;
        }

        @Override
        public int print(Graphics g, PageFormat format, int page_index) throws PrinterException {

            if (page_index > 0) {
                return Printable.NO_SUCH_PAGE;
            }
            Paper paperq = new Paper();
            paperq.setSize(595, 872);
            paperq.setImageableArea(1, 1, 595, 872);
        
            PageFormat pf = new PageFormat();
            pf.setPaper(paperq);
            Graphics2D g2 = (Graphics2D) g;
            g2.translate(format.getImageableX(), format.getImageableY());

            double width = (int) Math.floor(format.getImageableWidth());
            double height = (int) Math.floor(format.getImageableHeight());

            if (!fill) {

                width = Math.min(width, comp.getPreferredSize().width) +200;/// HERERERERERER!!!!!!!
                height = Math.min(height, comp.getPreferredSize().height) ;

            }

            comp.setBounds(0, 0, (int) Math.floor(width), (int) Math.floor(height));
            if (comp.getParent() == null) {
                comp.addNotify();
            }
            comp.validate();
            comp.doLayout();
            comp.printAll(g2);
            if (comp.getParent() != null) {
                comp.removeNotify();
            }

            return Printable.PAGE_EXISTS;
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConPay;
    private javax.swing.JButton btnRefreshDis;
    private javax.swing.JButton btnSearchGuests;
    private javax.swing.JComboBox<String> cmbbType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    public javax.swing.JTable jtblPayments;
    private javax.swing.JLabel lblClient;
    private javax.swing.border.LineBorder lineBorder1;
    private javax.swing.JPanel panInv;
    private javax.swing.JTextPane taInv;
    private javax.swing.JTextField txtAmnt;
    private javax.swing.JTextField txtChkin;
    private javax.swing.JTextField txtChkout;
    private javax.swing.JTextField txtClientID;
    private javax.swing.JTextField txtDateDis;
    private javax.swing.JTextField txtInvNoDis;
    private javax.swing.JTextField txtLastRun;
    private javax.swing.JTextField txtNamed;
    private javax.swing.JTextField txtNamedis;
    private javax.swing.JTextField txtNotes;
    private javax.swing.JTextField txtPaySearch;
    private javax.swing.JTextField txtRate;
    private javax.swing.JTextField txtResID;
    private javax.swing.JTextField txtResID1;
    private javax.swing.JTextField txtResid;
    private javax.swing.JTextField txtRoomdis;
    private javax.swing.JTextField txtroom;
    private javax.swing.JTextField txttxnID;
    // End of variables declaration//GEN-END:variables
}
