/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hms.pro;

import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.Year;
import java.lang.Object;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import javax.swing.JOptionPane;

/**
 *
 * @author lt1
 */
public class MainDesk extends javax.swing.JPanel {
    int clientNum = 0;
    int resNewNum = 0;
    int txnNum = 0;
    int errD1 = 0;
    int errD2 = 0;
    int errR1 = 0;
    int errRm = 0;
    int errC1  = 0;
    String curstr = "0.00";
    DecimalFormat formatter = new DecimalFormat("#,##0.00");
    DateFormat formatD = new SimpleDateFormat("YYYY/MM/DD");
    
    
    
    
    /**
     * Creates new form MainDesk
     */
    public MainDesk() {
        initComponents();
        
            resListBuild();
            showAvailRms();
            fieldsLock();
            Guest_Dis();
            popTypes();
            // Set fields to display
            
            
            BigDecimal amt = new BigDecimal(curstr);
            String curStr = formatter.format(amt);
            txtRate.setText(curStr);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblFrontDesk = new javax.swing.JTable();
        txtDateDis = new javax.swing.JTextField();
        txtFreeRooms = new javax.swing.JTextField();
        txtReservations = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        butExtend = new javax.swing.JButton();
        butOut = new javax.swing.JButton();
        pnlFD = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtroom = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtSurname = new javax.swing.JTextField();
        txtAdd1 = new javax.swing.JTextField();
        txtRate = new javax.swing.JTextField();
        txtClientID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPhne1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtPhone2 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtChkout = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtChkin = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        jtblGuestsDis = new javax.swing.JTable();
        btnRefreshDis = new javax.swing.JButton();
        txtClientSearch = new javax.swing.JTextField();
        btnSearchGuests = new javax.swing.JButton();
        txtAdd2 = new javax.swing.JTextField();
        txtNamedis = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtAdd4 = new javax.swing.JTextField();
        txtAdd3 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtNotes1 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtARef = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtResID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblRmsDis = new javax.swing.JTable();
        txttxnID = new javax.swing.JTextField();
        cmbTyps = new javax.swing.JComboBox<>();
        butCreate = new javax.swing.JButton();
        butSav = new javax.swing.JButton();
        txtChkOuttt = new javax.swing.JTextField();
        txtExStay = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("FRONT DESK");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 0, 121, 33));

        jtblFrontDesk.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Surname", "Name", "Room", "Check In", "Check Out", "Notes", "Booking Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblFrontDesk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblFrontDeskMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtblFrontDesk);
        if (jtblFrontDesk.getColumnModel().getColumnCount() > 0) {
            jtblFrontDesk.getColumnModel().getColumn(0).setPreferredWidth(24);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 970, 212));

        txtDateDis.setEditable(false);
        txtDateDis.setBackground(new java.awt.Color(0, 51, 204));
        txtDateDis.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtDateDis.setForeground(new java.awt.Color(255, 255, 255));
        txtDateDis.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDateDis.setFocusable(false);
        txtDateDis.setRequestFocusEnabled(false);
        txtDateDis.setSelectedTextColor(new java.awt.Color(255, 0, 0));
        add(txtDateDis, new org.netbeans.lib.awtextra.AbsoluteConstraints(767, 6, 199, 33));

        txtFreeRooms.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtFreeRooms.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        add(txtFreeRooms, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, 48, 30));

        txtReservations.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtReservations.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        add(txtReservations, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 50, 30));

        jLabel2.setText("Rooms Available");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 10, -1, 30));

        jLabel4.setText("Reservations");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, -1, 30));

        butExtend.setText("EXTEND STAY");
        butExtend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butExtendActionPerformed(evt);
            }
        });
        add(butExtend, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 100, 160, 40));

        butOut.setText("CHECK OUT");
        butOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butOutActionPerformed(evt);
            }
        });
        add(butOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 150, 160, 40));

        pnlFD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        pnlFD.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setText("Room");
        pnlFD.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 220, 40, 30));

        txtroom.setEditable(false);
        txtroom.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtroom.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        pnlFD.add(txtroom, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 220, 70, 30));

        jLabel7.setText("Check Out");
        pnlFD.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 290, 60, 30));

        txtSurname.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtSurname.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        pnlFD.add(txtSurname, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 190, 30));

        txtAdd1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtAdd1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        pnlFD.add(txtAdd1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, 190, 30));

        txtRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtRate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtRate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRateFocusLost(evt);
            }
        });
        pnlFD.add(txtRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 250, 70, 30));

        txtClientID.setEditable(false);
        txtClientID.setAutoscrolls(false);
        txtClientID.setEnabled(false);
        txtClientID.setFocusable(false);
        txtClientID.setRequestFocusEnabled(false);
        txtClientID.setVerifyInputWhenFocusTarget(false);
        pnlFD.add(txtClientID, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 290, 70, 30));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("Phone");
        pnlFD.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 50, 20));

        jLabel5.setText("Surname");
        pnlFD.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 50, 20));

        txtPhne1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtPhne1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        pnlFD.add(txtPhne1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, 190, 30));

        jLabel8.setText("Address");
        pnlFD.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 50, 20));

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel12.setText("Alt Phone");
        pnlFD.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 60, 20));

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel15.setText("eMail");
        pnlFD.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 50, 20));

        txtPhone2.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtPhone2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        pnlFD.add(txtPhone2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, 190, 30));

        jLabel13.setText("Check In");
        pnlFD.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 260, 60, 30));

        jLabel16.setText("Rate €");
        pnlFD.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 250, 40, 30));

        txtChkout.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtChkout.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtChkout.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                datFormat2(evt);
            }
        });
        pnlFD.add(txtChkout, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 290, 100, 30));

        txtEmail.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtEmail.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        pnlFD.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 250, 250, 30));

        txtChkin.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtChkin.setAutoscrolls(false);
        txtChkin.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtChkin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                datFormat1(evt);
            }
        });
        pnlFD.add(txtChkin, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 260, 100, 30));

        jtblGuestsDis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Surname", "Address", "Phone", "Notes 1", "Notes 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblGuestsDis.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtblGuestsDis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblGuestsDisMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(jtblGuestsDis);

        pnlFD.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, 460, 130));

        btnRefreshDis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/pro/img/update.png"))); // NOI18N
        btnRefreshDis.setText("Clear Search");
        btnRefreshDis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshDisActionPerformed(evt);
            }
        });
        pnlFD.add(btnRefreshDis, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 220, 130, 30));
        pnlFD.add(txtClientSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 220, 210, 30));

        btnSearchGuests.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/pro/img/search x30.png"))); // NOI18N
        btnSearchGuests.setText("Search");
        btnSearchGuests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchGuestsActionPerformed(evt);
            }
        });
        pnlFD.add(btnSearchGuests, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 220, 100, 30));

        txtAdd2.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtAdd2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        pnlFD.add(txtAdd2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 190, 30));

        txtNamedis.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtNamedis.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        pnlFD.add(txtNamedis, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 190, 30));

        jLabel10.setText("Name");
        pnlFD.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 50, 20));

        txtAdd4.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtAdd4.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        pnlFD.add(txtAdd4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, 190, 30));

        txtAdd3.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtAdd3.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        pnlFD.add(txtAdd3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 190, 30));

        txtNotes1.setColumns(20);
        txtNotes1.setLineWrap(true);
        txtNotes1.setRows(1);
        txtNotes1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane3.setViewportView(txtNotes1);

        pnlFD.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 40, 460, 30));

        txtARef.setColumns(14);
        txtARef.setRows(1);
        txtARef.setTabSize(5);
        txtARef.setAutoscrolls(false);
        txtARef.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane7.setViewportView(txtARef);

        pnlFD.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, 460, 30));

        jLabel17.setText("References");
        pnlFD.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 60, 20));

        jLabel18.setText("Notes");
        pnlFD.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 60, 20));

        txtResID.setEditable(false);
        txtResID.setAutoscrolls(false);
        txtResID.setEnabled(false);
        txtResID.setFocusable(false);
        txtResID.setRequestFocusEnabled(false);
        txtResID.setVerifyInputWhenFocusTarget(false);
        pnlFD.add(txtResID, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 290, 70, 30));

        jtblRmsDis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room", "Floor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblRmsDis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomClick(evt);
            }
        });
        jScrollPane1.setViewportView(jtblRmsDis);

        pnlFD.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 10, 150, 200));

        txttxnID.setEditable(false);
        txttxnID.setAutoscrolls(false);
        txttxnID.setEnabled(false);
        txttxnID.setFocusable(false);
        txttxnID.setRequestFocusEnabled(false);
        txttxnID.setVerifyInputWhenFocusTarget(false);
        pnlFD.add(txttxnID, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 290, 70, 30));

        cmbTyps.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbTyps.setName(""); // NOI18N
        cmbTyps.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTypsItemStateChanged(evt);
            }
        });
        pnlFD.add(cmbTyps, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 290, 160, 30));

        add(pnlFD, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 970, 330));

        butCreate.setText("NEW BOOKING");
        butCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCreateActionPerformed(evt);
            }
        });
        add(butCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 270, 160, 40));

        butSav.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/pro/img/save.png"))); // NOI18N
        butSav.setText("SAVE");
        butSav.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSavActionPerformed(evt);
            }
        });
        add(butSav, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 560, 160, 40));
        add(txtChkOuttt, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 220, 160, 40));
        add(txtExStay, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 50, 160, 40));
    }// </editor-fold>//GEN-END:initComponents

    public void fieldsLock(){
    txtARef.setEnabled(false);
    txtAdd1.setEnabled(false);
    txtAdd2.setEnabled(false);
    txtAdd3.setEnabled(false);
    txtAdd4.setEnabled(false);
    txtChkin.setEnabled(false);
    txtChkout.setEnabled(false);
    txtClientID.setEnabled(false);
    txtEmail.setEnabled(false);
    txtFreeRooms.setEnabled(false);
    txtNamedis.setEnabled(false);
    txtNotes1.setEnabled(false);
    txtPhne1.setEnabled(false);
    txtPhone2.setEnabled(false);
    txtRate.setEnabled(false);
    txtResID.setEnabled(false);
    txtReservations.setEnabled(false);
    txtSurname.setEnabled(false);
    txtroom.setEnabled(false);
    butSav.setVisible(false);
    cmbTyps.setVisible(false);
     txtResID.setVisible(false);
    txtExStay.setVisible(false);
    txtChkOuttt.setVisible(false);
    butExtend.setVisible(false);
    butOut.setVisible(false);
    txttxnID.setVisible(false);
    txtClientID.setVisible(false);
    }
     public void popTypes(){
                  
        try {
	        
            Statement s = db1.mycon1().createStatement();
            ResultSet rs =  s.executeQuery("SELECT * FROM paytypes");
          
	    // Clear the existing items in the ComboBox
	    cmbTyps.removeAllItems();
	    // Loop through the results and add them to the ComboBox
	    while (rs.next()) {
	        cmbTyps.addItem(rs.getString(2));
	    }rs.close();
            s.close();
	       
	    } catch (SQLException e) {
	        // Log the error
	        System.out.println("Error: " + e.getMessage());
	    }
         
      
    }
    private void butCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCreateActionPerformed
        // TODO add your handling code here:
        //
        // Code for enable/clear textfields
        // change buttonn text to SAVE
        // generate new reveration with details and log
    if (butSav.isVisible() != true){
         txtExStay.setVisible(false);
    txtChkOuttt.setVisible(false);
    butExtend.setVisible(false);
    butOut.setVisible(false);
        txtARef.setEnabled(true);
    txtAdd1.setEnabled(true);
    txtAdd2.setEnabled(true);
    txtAdd3.setEnabled(true);
    txtAdd4.setEnabled(true);
    txtChkin.setEnabled(true);
    txtChkout.setEnabled(true);
    txtEmail.setEnabled(true);
    txtFreeRooms.setEnabled(false);
    txtNamedis.setEnabled(true);
    txtNotes1.setEnabled(true);
    txtPhne1.setEnabled(true);
    txtPhone2.setEnabled(true);
    txtRate.setEnabled(true);
    txtSurname.setEnabled(true);
    txtroom.setEnabled(true);
    txtARef.setText("");
    txtAdd1.setText("");
    txtAdd2.setText("");
    txtAdd3.setText("");
    txtAdd4.setText("");
    txtChkin.setText(LocalDate.now().getYear()+"-"+ LocalDate.now().getMonthValue() +"-" +LocalDate.now().getDayOfMonth());
    txtChkout.setText(LocalDate.now().getYear()+"-"+ (LocalDate.now().getMonthValue()+3) +"-" +LocalDate.now().getDayOfMonth());
    txtClientID.setText("");
    txtEmail.setText("");
    txtFreeRooms.setEnabled(false);
    txtNamedis.setText("");
    txtNotes1.setText("");
    txtPhne1.setText("");
    txtPhone2.setText("");
    txtRate.setText("");
    txtSurname.setText("");
    txtResID.setText("");
    butSav.setVisible(true);
    cmbTyps.setVisible(true);
    txtroom.setText("");
    } else{
    txtARef.setText("");
    txtAdd1.setText("");
    txtAdd2.setText("");
    txtAdd3.setText("");
    txtAdd4.setText("");
    txtChkin.setText(LocalDate.now().getYear()+"-"+ LocalDate.now().getMonthValue() +"-" +LocalDate.now().getDayOfMonth());
    txtChkout.setText(LocalDate.now().getYear()+"-"+ (LocalDate.now().getMonthValue()+2) +"-" +LocalDate.now().getDayOfMonth());
    txtClientID.setText("");
    txtEmail.setText("");
    txtNamedis.setText("");
    txtNotes1.setText("");
    txtPhne1.setText("");
    txtPhone2.setText("");
    txtRate.setText("");
    txtSurname.setText("");
    txtResID.setText("");
    txtroom.setText("");
     txtExStay.setVisible(false);
    txtChkOuttt.setVisible(false);
    butExtend.setVisible(false);
    butOut.setVisible(false);
    }
    
        
    }//GEN-LAST:event_butCreateActionPerformed

    private void btnRefreshDisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshDisActionPerformed
        // TODO add your handling code here:
        Guest_Dis();
        txtClientSearch.setText("");
      
    }//GEN-LAST:event_btnRefreshDisActionPerformed

    private void btnSearchGuestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchGuestsActionPerformed
        // TODO add your handling code here:
        jtblGuestsDis.setVisible(true);
        ResDis3();

    }//GEN-LAST:event_btnSearchGuestsActionPerformed

    private void jtblGuestsDisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblGuestsDisMouseClicked
        // TODO add your handling code here:
         if (butSav.isVisible() == true){  
            clientNum =jtblGuestsDis.getSelectedRow() ;       /////****************************************************
            txtClientID.setText(jtblGuestsDis.getValueAt(clientNum, 0).toString());
            clientNum = Integer.valueOf(txtClientID.getText());
            dataPop();
         }
    }//GEN-LAST:event_jtblGuestsDisMouseClicked

    public static void infoBox(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, "!" + titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void roomClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomClick
        // TODO add your handling code here:
        if (butSav.isVisible() == true){        
            int rowClik = jtblRmsDis.getSelectedRow();
            txtroom.setText (jtblRmsDis.getValueAt(rowClik, 0).toString());
        }
        
        
    }//GEN-LAST:event_roomClick

    private void txtRateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRateFocusLost
        
        try {
            int rteAmt  = Integer.parseInt(txtRate.getText());
            if ((butSav.isVisible() == true) && (txtRate.getText().isEmpty() != true)){ 
                txtRate.setText(String.valueOf(rteAmt));
            }
        }catch(Exception rte){
            txtRate.setText("0.00");
        }
        
    }//GEN-LAST:event_txtRateFocusLost

    private void datFormat1(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_datFormat1
         
         String frmDate  = txtChkin.getText();
         
        try {
            if ((butSav.isVisible() == true) && (txtChkin.getText().isEmpty() != true)){  
                txtChkin.setText(formatD.format(frmDate));
            }
        }catch(Exception strup){
              
        }
        
    }//GEN-LAST:event_datFormat1

    private void datFormat2(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_datFormat2
         String toDate  = txtChkout.getText();
        
        try {
            if ((butSav.isVisible() == true)&&(txtChkout.getText().isEmpty() != true)){             
                txtChkout.setText(formatD.format(toDate));
            }
        }catch(Exception strup){
               
        }
    }//GEN-LAST:event_datFormat2

    private void cmbTypsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTypsItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbTypsItemStateChanged

    private void butSavActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSavActionPerformed
        // TODO add your handling code here:
           
        // //////////////////////////////////////////////////////////////////////////////
        // new txn no ....
        try{
            resNewNum = 0;
            int txnsgurmno = 0;
            int txnsgno = 0;
            String txnsCki  = "";
            int txnsamtpay =0;
            String txnsCko  ="";
            String txnstype = "";
            String txnsdetails = "";
            Statement s19 = db1.mycon1().createStatement();
            ResultSet rs15 =  s19.executeQuery("SELECT txns.tx_id, txns.created, txns.type, txns.resv_no, txns.gu_rm_no, txns.gue_no, txns.rm_no, txns.details, txns.amtpay, txns.meth FROM txns ;");
       
            while (rs15.next()){
                txnNum = txnNum + 1;
            }rs15.close();
            Statement s29 = db1.mycon1().createStatement();
            ResultSet rs16 =  s29.executeQuery("SELECT reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge FROM reservations;");
       
            while (rs16.next()){
                resNewNum = resNewNum + 1;
            }rs16.close();
            //txnNum = txnNum + 1;
            //resNewNum = resNewNum + 1;
            txtResID.setText(String.valueOf(resNewNum));
            txttxnID.setText(String.valueOf(txnNum));
            String creTme = LocalDate.now().getYear() +"-"+ LocalDate.now().getMonthValue() +"-" + LocalDate.now().getDayOfMonth();
           
            int txnstxid = txnNum; 
            String txnscreated = creTme; 
            txnstype = "Accommodation"; 
            int txnsresvno =  Integer.parseInt(txtResID.getText()); 
            String txnsmeth = String.valueOf(cmbTyps.getSelectedItem());///// user entry below
            if (txtroom.getText().isEmpty() != true){
                txnsgurmno = Integer.parseInt(txtroom.getText());
            }
            else{
                errRm = 1;            
            }
            if (txtClientID.getText().isEmpty() != true ){
                 txnsgno = Integer.parseInt(txtClientID.getText()); 
            }
            else{
                errC1 =1;            
            }
            if (txtRate.getText().isEmpty() != true ){
                 txnsamtpay = Integer.parseInt(txtRate.getText()); 
            }
            else{
                errR1 =1;            
            }
            if (txtChkin.getText().isEmpty() != true ){
                 txnsCki = txtChkin.getText().toString(); 
                 
                 //txtChkin.setText( formatD.format(txnsCki));
            }
            else{
                errD1 =1;            
            }
            if (txtChkout.getText().isEmpty() != true ){
                 txnsCko = txtChkout.getText().toString(); 
                 
                 //txtChkout.setText( formatD.format(txnsCko));
            }
            else{
                errD1 =1;            
            }
            
            if ((errR1 == 0) && (errC1 ==0) && (errRm == 0) && (errD1 == 0) && (errD2 == 0)){
               
            txnsdetails = ("LOG: " + String.valueOf(resNewNum) + ":" + String.valueOf(txnsgno) + ":" + String.valueOf(txnsCki) + ":"+ String.valueOf(txnsgurmno) + ":"+String.valueOf(txnsCko) + ": " + txtNotes1.getText() + ": 0: 3: " + String.valueOf(creTme) + ": "+ String.valueOf(txnstxid) +": " + txtRate.getText() + ": " + String.valueOf(txnstxid) + ": "+ String.valueOf(txnscreated) + ": " + String.valueOf(txnstype) + ": " + String.valueOf(txnsresvno) + ": " + String.valueOf(txnsgurmno) + ": "+ String.valueOf(txnsgno) + ": " + String.valueOf(txnsgurmno) + ": "+ String.valueOf(txnsdetails) + ":  " + String.valueOf(txnsamtpay) + ": "+ String.valueOf(txnsmeth)    + ":EOL:") ;
            
            String resAdd1 = ("INSERT INTO reservations (reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge) VALUES ");
                            //                          1          2           3           4           5               6               7           8           9       10
            String txnAdd1 = ("INSERT INTO txns (txns.tx_id, txns.created, txns.type, txns.resv_no, txns.gu_rm_no, txns.gue_no, txns.rm_no, txns.details, txns.amtpay, txns.meth ) VALUES ");
            //                          
            String resAdd2 = ("('" + resNewNum + "', '" + String.valueOf(txnsgno) + "', '" + String.valueOf(txnsCki) + "', '"+ String.valueOf(txnsgurmno) + "', '"+String.valueOf(txnsCko) + "', '" + String.valueOf(txtNotes1.getText().toString()) + "', '0', '3', '"+ String.valueOf(creTme) + "', '"+ String.valueOf(txnstxid) +"', '"+ String.valueOf(txnsamtpay) +  "');");
            //                                      1                                   2                                   3                                   4                               5                                           6                               7                                   8                        9   10        
            String txnAdd2 = ("('" + String.valueOf(txnstxid) + "', '"+ String.valueOf(creTme) + "', '" + String.valueOf(txnstype) + "', '" + resNewNum + "', '" + String.valueOf(txnsgurmno) + "', '"+ String.valueOf(txnsgno) + "', '" + String.valueOf(txnsgurmno) + "', '"+ String.valueOf(txnsdetails) + "',  '0',  '' );");
            String toDB1 = resAdd1 + resAdd2;
            String toDB2 = txnAdd1 + txnAdd2;
                
            
              //Add Record to db
            Statement s99 = db1.mycon1().createStatement();
            
            try { 
                
                s99.executeUpdate(toDB1);
            } catch (SQLException e) { 
                JOptionPane.showMessageDialog(null, "RES DB update error","D'oh", JOptionPane.ERROR_MESSAGE);
            }          s99.close();
            
            Statement s88 = db1.mycon1().createStatement();
            
            
              try { 
                
                s88.executeUpdate(toDB2);
            } catch (SQLException e) { 
                 JOptionPane.showMessageDialog(null, "TXN DB update error","D'oh!", JOptionPane.ERROR_MESSAGE);
            }          s88.close();
               
                
            }else{
                String errStr1 = "R: "+errR1+" C: "+ errC1 + " R: " + errRm + " I: " + errD1+ " O: " + errD2 + ".";
                JOptionPane.showMessageDialog(null, errStr1.toString(),"Errors" , JOptionPane.ERROR_MESSAGE);
                    
            }
        
        
        }catch (SQLException se){
      
            JOptionPane.showMessageDialog(null, "NOPE!","Hey!", JOptionPane.ERROR_MESSAGE);
      
        }
        jtblFrontDesk.invalidate();
        resListBuild();
        
        showAvailRms();
        
        fieldsLock();
       
        
        
    
    }//GEN-LAST:event_butSavActionPerformed

    private void jtblFrontDeskMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblFrontDeskMouseClicked
        if (butSav.isVisible() != true) {
            int rowCliky = jtblFrontDesk.getSelectedRow();
            txtResID.setText(jtblFrontDesk.getValueAt(rowCliky, 0).toString()) ;
            dataPop2();
        }
        txtExStay.setVisible(true);
        //txtChkOuttt.setVisible(true);
        butExtend.setVisible(true);
        butOut.setVisible(true);
        txtChkOuttt.setText(LocalDate.now().getYear()+"-"+ LocalDate.now().getMonthValue() +"-" +LocalDate.now().getDayOfMonth());
        txtExStay.setText(txtChkout.getText().toString());
    
    }//GEN-LAST:event_jtblFrontDeskMouseClicked

    private void butExtendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butExtendActionPerformed
        if ( (txtResID.getText().isEmpty() != true) && (txtExStay.getText().isEmpty() != true)){
         
            
            try {
            
            String sqlStat ="UPDATE reservations SET reservations.date_end = ";
            sqlStat = sqlStat + " '" + txtExStay.getText().toString() + " '";
            
            sqlStat =   sqlStat + " WHERE reservations.res_id = '" + (txtResID.getText().toString()) + "' ;" ;
                       
            Statement s59 = db1.mycon1().createStatement();
            
            try { 
                
                s59.executeUpdate(sqlStat);
                
            } catch (SQLException e) { 
                JOptionPane.showMessageDialog(null, "... no ..., check entries","Computer", JOptionPane.ERROR_MESSAGE);
            }          s59.close();   
            
            
            
         }catch(SQLException checmeoout){
             JOptionPane.showMessageDialog(null, "... no ...","Computer", JOptionPane.ERROR_MESSAGE);    
         
         }    
        }
       jtblFrontDesk.invalidate();
        resListBuild();
        
        showAvailRms();
        
        fieldsLock();
        
        
    }//GEN-LAST:event_butExtendActionPerformed

    private void butOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butOutActionPerformed
         if ( (txtResID.getText().isEmpty() != true)){
         try {
            
            String sqlStat ="UPDATE reservations SET reservations.date_end = ";
            sqlStat = sqlStat + " '" + (LocalDate.now().getYear()) + "-" + (LocalDate.now().getMonthValue()) + "-" + (LocalDate.now().getDayOfMonth()) + " '";
            
            sqlStat =   sqlStat + " WHERE reservations.res_id = '" + (txtResID.getText().toString()) + "' ;" ;
                       
            Statement s59 = db1.mycon1().createStatement();
            
            try { 
                
                s59.executeUpdate(sqlStat);
                
            } catch (SQLException e) { 
                JOptionPane.showMessageDialog(null, "... no ..., check entries","Computer", JOptionPane.ERROR_MESSAGE);
            }          s59.close();   
            
            
            
         }catch(SQLException checmeoout){
             JOptionPane.showMessageDialog(null, "... no ...","Computer", JOptionPane.ERROR_MESSAGE);    
         
         }    
        }
       jtblFrontDesk.invalidate();
        resListBuild();
        
        showAvailRms();
        
        fieldsLock();
    }//GEN-LAST:event_butOutActionPerformed
    
    
    public void resListBuild(){
        try {
            
            DefaultTableModel dt4 = (DefaultTableModel) jtblFrontDesk.getModel();
            dt4.setRowCount(0);
           
            String Sdate = ( LocalDate.now().getYear()+"/"+ LocalDate.now().getMonthValue() +"/" +LocalDate.now().getDayOfMonth() );
            int tYerr = Year.now().getValue();
            String Edate =  (tYerr + 1) + "/12/31" ;
            
            
            
            
            txtDateDis.setText(Sdate);
            
            Statement s = db1.mycon1().createStatement();
            ResultSet rs =  s.executeQuery("SELECT reservations.res_id, guests.LastName, guests.FirstName, reservations.room_no, reservations.date_start,  reservations.date_end, reservations.notes, reservations.date_resmade, reservations.status,  reservations.guest_id, guests.ID,  guests.Reference, guests.LastDate FROM guests INNER JOIN reservations ON guests.ID = reservations.guest_id WHERE ((((reservations.date_start) <= '" + Edate + "') ) AND  ((reservations.date_end) >= '" + Sdate + "') );");
            while (rs.next()) {              
           
                Vector v = new Vector();    
                
                v.add(rs.getString(1)); //name
                v.add(rs.getString(3)); //surname
                v.add(rs.getString(2)); //Address1 
                v.add(rs.getString(4));//PHone
                v.add(rs.getString(5));//notes1
                v.add(rs.getString(6));//notes2
                v.add(rs.getString(7));//notes2
                v.add(rs.getString(8));//notes2
                dt4.addRow(v);
            }rs.close();
            s.close();
        
        
        
        
        }catch (SQLException e) {
            System.out.println(e);
        }
        
        
        
    }
    
    
    public void showAvailRms(){
           try {
            DefaultTableModel dt5 = (DefaultTableModel) jtblRmsDis.getModel();
            dt5.setRowCount(0);
            String rmChk = "";
            String rmInUse = "101";
            String dbChk = "0";
            int rmUsed = 0;            
            String Sdate = LocalDate.now().getYear()+"/"+ LocalDate.now().getMonthValue() +"/" +LocalDate.now().getDayOfMonth();
            int tYerr = Year.now().getValue();
            String Edate = (tYerr + 1) + "/12/31";
            Statement s5 = db1.mycon1().createStatement();
            ResultSet rs2 =  s5.executeQuery("SELECT rooms.room_num, rooms.room_id, rooms.floor ,rooms.price FROM rooms");
            
            Statement s8 = db1.mycon1().createStatement();
            ResultSet rs4 =  s8.executeQuery("SELECT reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge FROM reservations WHERE ((((reservations.date_start) <= '" + Edate + "') ) AND  ((reservations.date_end) >= '" + Sdate + "'));");
            if (txtroom.getText().isEmpty() != true){
                rmChk = txtroom.getText().toString();
            }
            
            
            rs2.beforeFirst();
            while (rs2.next()) { 
                rmChk = rs2.getString(1);
                while (rs4.next()) {
                    rmInUse = rs4.getString(4);        
                    int chkA = Integer.valueOf(rmChk) ;
                    int chkB = Integer.valueOf(rmInUse);
                    if( chkA == chkB ){
                        rmUsed = 1;  
                    } 
                    
                }
                if (rmUsed == 0){
                        Vector v = new Vector();    
                        v.add(rs2.getString(1)); //num
                        v.add(rs2.getString(3)); //floor 
                        dt5.addRow(v);
                }
                rs4.beforeFirst();
                rmUsed = 0; 
                
            }
            rs2.close();
            rs4.close();
            //Send count to Dis  txtReservations txtFreeRooms
            int rmsCount = jtblRmsDis.getRowCount();
            int resCount = jtblFrontDesk.getRowCount();
            txtFreeRooms.setText(String.valueOf(rmsCount));
            txtReservations.setText(String.valueOf(resCount));
            Statement s9 = db1.mycon1().createStatement();
            ResultSet rs5 =  s9.executeQuery("SELECT reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge FROM reservations ");
           
                    
            while (rs5.next()){
                resNewNum = resNewNum+1;
            }rs5.close();
            
            txtResID.setText(String.valueOf(resNewNum));
            
            
            
        }catch (SQLException e) {
            System.out.println(e);
        }
    
    
    
    }
    
    public void resListFreeRooms(){
        try {
            DefaultTableModel dt5 = (DefaultTableModel) jtblRmsDis.getModel();
            dt5.setRowCount(0);
            String rmChk = "";
            String rmInUse = "";
            String dbChk = "0";
            int rmUsed = 0;            
            String Sdate = LocalDate.now().getYear()+"/"+ LocalDate.now().getMonthValue() +"/" +LocalDate.now().getDayOfMonth();
            int tYerr = Year.now().getValue();
            String Edate = (tYerr + 1) + "/12/31";
            Statement s5 = db1.mycon1().createStatement();
            ResultSet rs2 =  s5.executeQuery("SELECT rooms.room_num, rooms.room_id, rooms.floor ,rooms.price FROM rooms");
            
             
            while (rs2.next()) { 
                
                    Vector v = new Vector();    
                    v.add(rs2.getString(1)); //num
                    v.add(rs2.getString(3)); //floor 
                    dt5.addRow(v);
                
                
            }rs2.close();
            
            
        }catch (SQLException e) {
            System.out.println(e);
        }
        showAvailRms();
    }
    
    
    public void Guest_Dis(){
        try {
            DefaultTableModel dt21 = (DefaultTableModel) jtblGuestsDis.getModel();
            dt21.setRowCount(0);
      
            Statement as = db1.mycon1().createStatement();
            ResultSet rs =  as.executeQuery("SELECT guests.ID, guests.Prefix, guests.FirstName, guests.LastName, guests.Address_1, guests.County,  guests.Phone1, guests.Email, guests.Reference, guests.FirstDate, guests.LastDate, guests.Phone2, guests.Address_2, guests.Town_City, guests.Country, guests.UserField1, guests.UserField2, guests.ExtraField1, guests.ExtraField2, guests.Status FROM guests");
          
            while (rs.next()) {              
           
                Vector v = new Vector();    
                v.add(rs.getString(1)); //name
                v.add(rs.getString(3)); //name
                v.add(rs.getString(4)); //surname
                v.add(rs.getString(5)); //Address1 
                v.add(rs.getString(12));//PHone
               
                v.add(rs.getString(18));//notes1
                v.add(rs.getString(19));//notes2
               
                dt21.addRow(v);
                txtClientID.setText(rs.getString(1));
                txtNamedis.setText(rs.getString(3));
                txtSurname.setText(rs.getString(4));
                txtAdd1.setText(rs.getString(5));
                txtAdd2.setText(rs.getString(6));
                txtAdd3.setText(rs.getString(7));
                txtAdd4.setText(rs.getString(8));
                txtPhne1.setText(rs.getString(10));
                txtPhone2.setText(rs.getString(11));
                txtEmail.setText(rs.getString(12));
                txtChkin.setText(rs.getString(13));
                txtChkout.setText(rs.getString(14));
                txtARef.setText(rs.getString(16));
                txtNotes1.setText(rs.getString(17));
            }
            rs.close();    
                
        } catch (SQLException e) {
            System.out.println(e);
        }
    }
     
    
    public void dataPop(){
        try {
         int CliID = clientNum ;          
         Statement s1 = db1.mycon1().createStatement();
          ResultSet rs =  s1.executeQuery("SELECT guests.ID, guests.Prefix, guests.FirstName, guests.LastName, guests.Address_1, guests.Address_2,  guests.Town_City, guests.County,  guests.Country,  guests.Phone1, guests.Phone2, guests.Email, guests.FirstDate, guests.LastDate, guests.Status, guests.Reference, guests.UserField1, guests.UserField2, guests.ExtraField1, guests.ExtraField2 FROM guests WHERE guests.ID = '" + CliID + "'");
          
            while (rs.next()) {              
           
                
                txtNamedis.setText(rs.getString(3));
                txtSurname.setText(rs.getString(4));
                txtAdd1.setText(rs.getString(5));
                txtAdd2.setText(rs.getString(6));
                txtAdd3.setText(rs.getString(7));
                txtAdd4.setText(rs.getString(8));
                
                txtPhne1.setText(rs.getString(10));
                txtPhone2.setText(rs.getString(11));
                txtEmail.setText(rs.getString(12));
                txtChkin.setText(rs.getString(13));
                txtChkout.setText(rs.getString(14));
                
                txtARef.setText(rs.getString(16));
                txtNotes1.setText(rs.getString(17));
                
            }rs.close();
        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    
    public void dataPop2(){
        try {
         String ResID = txtResID.getText().toString();          
         Statement s61 = db1.mycon1().createStatement();
         
         /////                                                  1               2                   3                       4                       5                           6               7                       8                       9                               10                11            12              13              14              15                 16                 17            18              19              20              21        
         ResultSet rs33 =  s61.executeQuery("SELECT reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge, guests.FirstName, guests.LastName, guests.Address_1, guests.Address_2, guests.Town_City, guests.County, guests.Phone1, guests.Phone2, guests.Email, guests.Reference FROM guests INNER JOIN reservations ON guests.ID = reservations.guest_id  WHERE reservations.res_id = '" + ResID + "'");
          
            while (rs33.next()) {              
           
                
                txtNamedis.setText(rs33.getString(12));
                txtSurname.setText(rs33.getString(13));
                txtAdd1.setText(rs33.getString(14));
                txtAdd2.setText(rs33.getString(15));
                txtAdd3.setText(rs33.getString(16));
                txtAdd4.setText(rs33.getString(17));
                
                txtPhne1.setText(rs33.getString(18));
                txtPhone2.setText(rs33.getString(19));
                txtEmail.setText(rs33.getString(20));
                txtChkin.setText(rs33.getString(3));
                txtChkout.setText(rs33.getString(5));
                
                txtARef.setText(rs33.getString(21));
                txtNotes1.setText(rs33.getString(6));
                
            }rs33.close();
        } catch (SQLException e) {
            System.out.println(e);
        }
    }
     
    public void ResDis3(){
        try {
          String serchName = txtClientSearch.getText();
          DefaultTableModel dt1 = (DefaultTableModel) jtblGuestsDis.getModel();
          dt1.setRowCount(0);
        
          
          Statement s1 = db1.mycon1().createStatement();
          ResultSet rs =  s1.executeQuery("SELECT guests.ID, guests.Prefix, guests.FirstName, guests.LastName, guests.Address_1, guests.County,  guests.Phone1, guests.Email, guests.Reference, guests.FirstDate, guests.LastDate, guests.Phone2, guests.Address_2, guests.Town_City, guests.Country, guests.UserField1, guests.UserField2, guests.ExtraField1, guests.ExtraField2, guests.Status FROM guests WHERE guests.LastName LIKE '" + serchName + "'");
          
            while (rs.next()) {              
               
                Vector v = new Vector();   
                v.add(rs.getString(1)); //name
                v.add(rs.getString(3)); //name
                v.add(rs.getString(4)); //surname
                v.add(rs.getString(5)); //Address1 
                v.add(rs.getString(12));//PHone
                v.add(rs.getString(18));//notes1
                v.add(rs.getString(19));//notes2
                         
                dt1.addRow(v);
              
            }rs.close();
        } catch (SQLException e) {
            System.out.println(e);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefreshDis;
    private javax.swing.JButton btnSearchGuests;
    private javax.swing.JButton butCreate;
    private javax.swing.JButton butExtend;
    private javax.swing.JButton butOut;
    private javax.swing.JButton butSav;
    private javax.swing.JComboBox<String> cmbTyps;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable jtblFrontDesk;
    private javax.swing.JTable jtblGuestsDis;
    private javax.swing.JTable jtblRmsDis;
    private javax.swing.JPanel pnlFD;
    private javax.swing.JTextArea txtARef;
    private javax.swing.JTextField txtAdd1;
    private javax.swing.JTextField txtAdd2;
    private javax.swing.JTextField txtAdd3;
    private javax.swing.JTextField txtAdd4;
    private javax.swing.JTextField txtChkOuttt;
    private javax.swing.JTextField txtChkin;
    private javax.swing.JTextField txtChkout;
    private javax.swing.JTextField txtClientID;
    private javax.swing.JTextField txtClientSearch;
    private javax.swing.JTextField txtDateDis;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtExStay;
    private javax.swing.JTextField txtFreeRooms;
    private javax.swing.JTextField txtNamedis;
    private javax.swing.JTextArea txtNotes1;
    private javax.swing.JTextField txtPhne1;
    private javax.swing.JTextField txtPhone2;
    private javax.swing.JTextField txtRate;
    private javax.swing.JTextField txtResID;
    private javax.swing.JTextField txtReservations;
    private javax.swing.JTextField txtSurname;
    private javax.swing.JTextField txtroom;
    private javax.swing.JTextField txttxnID;
    // End of variables declaration//GEN-END:variables
}
