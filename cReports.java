/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hms.pro;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.lang.Object;
import java.time.format.DateTimeFormatter;
import javax.imageio.ImageIO;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

/**
 *
 * @author lt1
 */
public class cReports extends javax.swing.JPanel {

    /**
     * Creates new form Payments
     */
    public cReports() {
        initComponents();
        Guest_Dis();
        txtCliID.setVisible(false) ;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cReports().setVisible(true);
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        btnClientRep = new javax.swing.JButton();
        txtClientSearch = new javax.swing.JTextField();
        btnSearchGuests = new javax.swing.JButton();
        btnRefreshDis = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtblGuestsDis = new javax.swing.JTable();
        pnlState = new javax.swing.JPanel();
        txtResID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtNamed = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtroom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDateDis = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtStatList = new javax.swing.JTextPane();
        txtCliID = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnClientRep.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/img/invo.png"))); // NOI18N
        btnClientRep.setText("PRINT");
        btnClientRep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClientRepActionPerformed(evt);
            }
        });
        add(btnClientRep, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 520, 168, 50));
        add(txtClientSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 310, 168, 30));

        btnSearchGuests.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/img/search x30.png"))); // NOI18N
        btnSearchGuests.setText("SEARCH");
        btnSearchGuests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchGuestsActionPerformed(evt);
            }
        });
        add(btnSearchGuests, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 310, 160, -1));

        btnRefreshDis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/img/update.png"))); // NOI18N
        btnRefreshDis.setText("RESET");
        btnRefreshDis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshDisActionPerformed(evt);
            }
        });
        add(btnRefreshDis, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 310, 120, -1));

        jtblGuestsDis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Surname", "Address", "Phone", "Notes 1", "Notes 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblGuestsDis.setColumnSelectionAllowed(true);
        jtblGuestsDis.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jtblGuestsDis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblGuestsDisMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jtblGuestsDis);
        jtblGuestsDis.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jtblGuestsDis.getColumnModel().getColumnCount() > 0) {
            jtblGuestsDis.getColumnModel().getColumn(0).setResizable(false);
            jtblGuestsDis.getColumnModel().getColumn(0).setPreferredWidth(26);
        }

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 20, 660, 274));

        pnlState.setBackground(new java.awt.Color(255, 255, 255));
        pnlState.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtResID.setEditable(false);
        txtResID.setAutoscrolls(false);
        txtResID.setBorder(null);
        txtResID.setFocusable(false);
        txtResID.setRequestFocusEnabled(false);
        txtResID.setVerifyInputWhenFocusTarget(false);
        pnlState.add(txtResID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 50, -1));

        jLabel5.setText("Name:");
        pnlState.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 40, -1));

        jLabel17.setText("Reservation:");
        pnlState.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 70, -1));

        txtNamed.setEditable(false);
        txtNamed.setBorder(null);
        pnlState.add(txtNamed, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, 190, -1));

        jLabel6.setText("Room:");
        pnlState.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 90, 40, -1));

        txtroom.setEditable(false);
        txtroom.setBorder(null);
        txtroom.setOpaque(true);
        pnlState.add(txtroom, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 90, 50, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("STATEMENT");
        pnlState.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, -1, -1));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/img/Logo.png"))); // NOI18N
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        pnlState.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 180, 80));

        txtDateDis.setEditable(false);
        txtDateDis.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtDateDis.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDateDis.setBorder(null);
        txtDateDis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateDisActionPerformed(evt);
            }
        });
        pnlState.add(txtDateDis, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, 90, 30));

        txtStatList.setEditable(false);
        txtStatList.setBorder(null);
        txtStatList.setAutoscrolls(false);
        txtStatList.setDisabledTextColor(new java.awt.Color(0, 102, 102));
        jScrollPane4.setViewportView(txtStatList);

        pnlState.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 430, 470));

        add(pnlState, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 450, 590));
        add(txtCliID, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 310, 40, 30));
    }// </editor-fold>//GEN-END:initComponents
public void Guest_Dis(){
        try {
            DefaultTableModel dt21 = (DefaultTableModel) jtblGuestsDis.getModel();
            dt21.setRowCount(0);
      
            Statement as = db1.mycon1().createStatement();
            ResultSet rs =  as.executeQuery("SELECT guests.ID, guests.Prefix, guests.FirstName, guests.LastName, guests.Address_1, guests.County,  guests.Phone1, guests.Email, guests.Reference, guests.FirstDate, guests.LastDate, guests.Phone2, guests.Address_2, guests.Town_City, guests.Country, guests.UserField1, guests.UserField2, guests.ExtraField1, guests.ExtraField2, guests.Status FROM guests");
          
            while (rs.next()) {              
           
                Vector v = new Vector();    
                v.add(rs.getString(1)); //name
                v.add(rs.getString(3)); //name
                v.add(rs.getString(4)); //surname
                v.add(rs.getString(5)); //Address1 
                v.add(rs.getString(12));//PHone
               
                v.add(rs.getString(18));//notes1
                v.add(rs.getString(19));//notes2
               
                dt21.addRow(v);
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
    }

private void popStatement(){
    txtStatList.repaint();
    try {
        
        String txnStr = txtCliID.getText().toString();
        txtStatList.setText("\t  Date     \t Type \t Method \t Amount\n");
        txtDateDis.setText(LocalDate.now().getYear()+"-"+ LocalDate.now().getMonthValue() +"-" +LocalDate.now().getDayOfMonth());  
        
        
        Statement s = db1.mycon1().createStatement();
        //                                              1             2          3            4            5               6           7             8           9           10                11            12                  13          14          
        ResultSet rs =  s.executeQuery("SELECT txns.tx_id, txns.created, txns.type, txns.resv_no, txns.gu_rm_no, txns.gue_no, txns.rm_no, txns.details, txns.amtpay, txns.meth FROM txns WHERE ((txns.gue_no='" + txnStr + "') AND (txns.type = 'Payment'));");
        
        while (rs.next()){
            txtStatList.setText(txtStatList.getText()+"\t  " + (rs.getString(2)).substring(0, 10) + "\t  " + (String.valueOf(rs.getString(3))) + "\t " + (String.valueOf(rs.getString(10))) + "\t " + (String.valueOf(rs.getString(9))) + "\n");
            txtResID.setText(String.valueOf(rs.getString(4)));
            txtroom.setText(String.valueOf(rs.getString(5)));
            
        }
        getInvName();
        rs.close();
               
                
        } catch (SQLException e) {
            System.out.println(e);
        }

}

   public void getInvName(){
        try{
            int serID =  Integer.valueOf(txtCliID.getText().toString());
            Statement as = db1.mycon1().createStatement();
            ResultSet rs1 =  as.executeQuery("SELECT guests.ID, guests.Prefix, guests.FirstName, guests.LastName, guests.Address_1, guests.County,  guests.Phone1, guests.Email, guests.Reference, guests.FirstDate, guests.LastDate, guests.Phone2, guests.Address_2, guests.Town_City, guests.Country, guests.UserField1, guests.UserField2, guests.ExtraField1, guests.ExtraField2, guests.Status FROM guests WHERE (((guests.ID)='" + serID + "'));");
            rs1.last();       
            txtNamed.setText(rs1.getString(3).toString()+" "+rs1.getString(4).toString());       
            rs1.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "INV - Name!","Error!", JOptionPane.ERROR_MESSAGE);
    
        }
    }
    public void getInvDates(){
      try{      
            int resID = Integer.valueOf(txtResID.getText());
            Statement s8 = db1.mycon1().createStatement();
            ResultSet rs4 =  s8.executeQuery("SELECT reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge FROM reservations WHERE ((reservations.res_id) = '" + resID + "');");
            rs4.last();        
              
            rs4.close();
        }catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "INV - Dates!","Error!", JOptionPane.ERROR_MESSAGE);
    
        }
    }
    private void btnClientRepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientRepActionPerformed
        try {
            
            printComponentToPrinterq(pnlState, true);
            //printComponentToPrinterq(tPanel, false);
        } catch (PrinterException exp) {
            exp.printStackTrace();
        }
        this.validate();
        
       
    }//GEN-LAST:event_btnClientRepActionPerformed

    private void btnSearchGuestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchGuestsActionPerformed
        // TODO add your handling code here:
        ResDis3();
        
    }//GEN-LAST:event_btnSearchGuestsActionPerformed

    private void btnRefreshDisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshDisActionPerformed
        // TODO add your handling code here:
        Guest_Dis();
        txtClientSearch.setText("");
    }//GEN-LAST:event_btnRefreshDisActionPerformed

    private void txtDateDisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateDisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateDisActionPerformed

    private void jtblGuestsDisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblGuestsDisMouseClicked
        int selRow = jtblGuestsDis.getSelectedRow();
        String selTxn = jtblGuestsDis.getValueAt(selRow, 0).toString();
        txtCliID.setText(selTxn);
        
        
        popStatement();
               
    }//GEN-LAST:event_jtblGuestsDisMouseClicked
    
    public void ResDis3(){
        try {
          String serchName = txtClientSearch.getText().toString();
          DefaultTableModel dt1 = (DefaultTableModel) jtblGuestsDis.getModel();
          dt1.setRowCount(0);
         
          
          Statement s1 = db1.mycon1().createStatement();
          ResultSet rs =  s1.executeQuery("SELECT  guests.ID, guests.Prefix, guests.FirstName, guests.LastName, guests.Address_1, guests.Address_2, guests.Town_City, guests.County, guests.Country, guests.Phone1, guests.Phone2, guests.Reference, guests.Email, guests.FirstDate, guests.LastDate, guests.UserField1 FROM guests WHERE ( (guests.LastName) LIKE '" + serchName + "');");
          
            while (rs.next()) {              
           
                Vector v = new Vector();    
                 v.add(rs.getString(1)); //name
                v.add(rs.getString(3)); //name
                v.add(rs.getString(4)); //surname
                v.add(rs.getString(5)); //Address1 
                
                         
                dt1.addRow(v);
              
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
    }
    
    
    
     public static void printComponentToPrinterq(JComponent comp, boolean fill) throws PrinterException {  
        String fileLoc = "";
        Paper paper = new Paper();
        paper.setSize(595, 842);
        paper.setImageableArea(1, 1, 595, 842);
        
        PageFormat pf = new PageFormat();
        pf.setPaper(paper);
       
        BufferedImage img = new BufferedImage(595, 842 ,BufferedImage.SCALE_SMOOTH);

        Graphics2D g2d = img.createGraphics();
        g2d.translate(pf.getImageableX(),pf.getImageableY());
        g2d.scale(1, 1);
        
        
        //Graphics2D graphics2D = img.getWidth()
        PrintForm.ComponentPrinter cp = new PrintForm.ComponentPrinter(comp, fill);
        PrinterJob  printJob = PrinterJob.getPrinterJob();

        printJob.setPrintable(cp);
        printJob.print();
            
        
        
        try {
            cp.print(g2d, pf, 0);
            
            
        } finally {
            g2d.dispose();
        }

        try {
            ImageIO.write(img, "png", new File("INVOICE_" + (LocalDate.now().format(DateTimeFormatter.ISO_DATE))   +".png"));
            fileLoc = ("INVOICE_" + (LocalDate.now().getDayOfMonth() +"-"+ LocalDate.now().getMonthValue() +"-" + LocalDate.now().getYear())   +".png");
        } catch (IOException ex) {
            ex.printStackTrace();
        } 
       
            
        
    }
     public static class ComponentPrinter implements Printable {

        private JComponent comp;
        private boolean fill;

        public ComponentPrinter(JComponent comp, boolean fill) {
            this.comp = comp;
            this.fill = fill;
        }

        @Override
        public int print(Graphics g, PageFormat format, int page_index) throws PrinterException {

            if (page_index > 0) {
                return Printable.NO_SUCH_PAGE;
            }
            Paper paperq = new Paper();
            paperq.setSize(595, 842);
            paperq.setImageableArea(1, 1, 595, 842);
        
            PageFormat pf = new PageFormat();
            pf.setPaper(paperq);
            Graphics2D g2 = (Graphics2D) g;
            g2.translate(format.getImageableX(), format.getImageableY());

            double width = (int) Math.floor(format.getImageableWidth());
            double height = (int) Math.floor(format.getImageableHeight());

            if (!fill) {

                width = Math.min(width, comp.getPreferredSize().width) + 100;
                height = Math.min(height, comp.getPreferredSize().height);

            }

            comp.setBounds(0, 0, (int) Math.floor(width), (int) Math.floor(height));
            if (comp.getParent() == null) {
                comp.addNotify();
            }
            comp.validate();
            comp.doLayout();
            comp.printAll(g2);
            if (comp.getParent() != null) {
                comp.removeNotify();
            }

            return Printable.PAGE_EXISTS;
        }

    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClientRep;
    private javax.swing.JButton btnRefreshDis;
    private javax.swing.JButton btnSearchGuests;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jtblGuestsDis;
    private javax.swing.JPanel pnlState;
    private javax.swing.JTextField txtCliID;
    private javax.swing.JTextField txtClientSearch;
    private javax.swing.JTextField txtDateDis;
    private javax.swing.JTextField txtNamed;
    private javax.swing.JTextField txtResID;
    private javax.swing.JTextPane txtStatList;
    private javax.swing.JTextField txtroom;
    // End of variables declaration//GEN-END:variables
}
