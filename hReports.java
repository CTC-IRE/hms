/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hms.pro;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.util.Locale;
import java.util.Date;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.YearMonth;
import java.time.Year;
import java.time.MonthDay;
import java.time.ZonedDateTime;
import java.time.LocalDateTime;
import java.time.Month; 
import java.time.temporal.ChronoField;
import java.lang.Object;
import java.lang.Enum;
import java.text.DateFormat;
import java.time.format.DateTimeFormatter;
import javax.imageio.ImageIO;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import static hms.pro.sReports.printComponentToPrinter;

/**
 *
 * @author lt1
 */
public class hReports extends javax.swing.JPanel {
    
    String selTxn = "";
     public static String[][] roomArray  ;
    /**
     * Creates new form Payments
     */
    public hReports() {
        initComponents();
        
        DateFill();
        genRep();
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hReports().setVisible(true);
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        butOccRep = new javax.swing.JButton();
        butOccPrint = new javax.swing.JButton();
        cmboRepMonths = new javax.swing.JComboBox<>();
        rbMonthly = new javax.swing.JRadioButton();
        rbDates = new javax.swing.JRadioButton();
        rbDate = new javax.swing.JRadioButton();
        ftxtFrom = new javax.swing.JFormattedTextField();
        ftxtTo = new javax.swing.JFormattedTextField();
        ftxtFromY = new javax.swing.JFormattedTextField();
        rbYearly = new javax.swing.JRadioButton();
        pantxxns = new javax.swing.JPanel();
        txtChkin = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtChkout = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtRptHead = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDateDis = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        taInv = new javax.swing.JTextPane();
        txtRptHead1 = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtblGuestsDis = new javax.swing.JTable();

        setForeground(new java.awt.Color(0, 0, 0));
        setPreferredSize(new java.awt.Dimension(1000, 321));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        butOccRep.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/img/reports.png"))); // NOI18N
        butOccRep.setText("SHOW");
        butOccRep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butOccRepActionPerformed(evt);
            }
        });
        add(butOccRep, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 530, 120, 50));

        butOccPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hms/img/invo.png"))); // NOI18N
        butOccPrint.setText("PRINT");
        butOccPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butOccPrintActionPerformed(evt);
            }
        });
        add(butOccPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 590, 120, 50));

        cmboRepMonths.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        add(cmboRepMonths, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 560, 119, -1));

        buttonGroup1.add(rbMonthly);
        rbMonthly.setText("Monthly");
        rbMonthly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMonthlyActionPerformed(evt);
            }
        });
        add(rbMonthly, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 560, 123, -1));

        buttonGroup1.add(rbDates);
        rbDates.setText("Date Range");
        rbDates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDatesActionPerformed(evt);
            }
        });
        add(rbDates, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 620, 123, -1));

        buttonGroup1.add(rbDate);
        rbDate.setText("Single Date (From)");
        rbDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDateActionPerformed(evt);
            }
        });
        add(rbDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 590, 123, -1));

        ftxtFrom.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/y"))));
        add(ftxtFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 590, 119, -1));

        ftxtTo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/y"))));
        add(ftxtTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 620, 119, -1));

        ftxtFromY.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("y"))));
        add(ftxtFromY, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 530, 119, -1));

        buttonGroup1.add(rbYearly);
        rbYearly.setSelected(true);
        rbYearly.setText("Year");
        rbYearly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbYearlyActionPerformed(evt);
            }
        });
        add(rbYearly, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 530, 123, -1));

        pantxxns.setBackground(new java.awt.Color(255, 255, 255));
        pantxxns.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtChkin.setEditable(false);
        txtChkin.setBorder(null);
        pantxxns.add(txtChkin, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 40, 100, 20));

        jLabel8.setText("To:");
        pantxxns.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 60, 40, 20));

        txtChkout.setEditable(false);
        txtChkout.setBorder(null);
        pantxxns.add(txtChkout, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, 100, 20));

        jLabel13.setText("From:");
        pantxxns.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 40, 20));

        txtRptHead.setEditable(false);
        txtRptHead.setBorder(null);
        pantxxns.add(txtRptHead, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 260, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("OCCUPANY REPORT");
        pantxxns.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        txtDateDis.setEditable(false);
        txtDateDis.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtDateDis.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtDateDis.setBorder(null);
        pantxxns.add(txtDateDis, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, 120, 20));

        taInv.setEditable(false);
        taInv.setBackground(new java.awt.Color(255, 255, 255));
        taInv.setBorder(null);
        taInv.setAutoscrolls(false);
        taInv.setCaretColor(new java.awt.Color(204, 204, 204));
        taInv.setDisabledTextColor(new java.awt.Color(0, 102, 102));
        taInv.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jScrollPane3.setViewportView(taInv);

        pantxxns.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 480, 530));

        txtRptHead1.setEditable(false);
        txtRptHead1.setBorder(null);
        pantxxns.add(txtRptHead1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 260, -1));

        add(pantxxns, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 510, 630));

        jtblGuestsDis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Room", "From", "To", "Rate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblGuestsDis.setColumnSelectionAllowed(true);
        jtblGuestsDis.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jtblGuestsDis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblGuestsDisMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jtblGuestsDis);
        jtblGuestsDis.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (jtblGuestsDis.getColumnModel().getColumnCount() > 0) {
            jtblGuestsDis.getColumnModel().getColumn(0).setResizable(false);
            jtblGuestsDis.getColumnModel().getColumn(0).setPreferredWidth(30);
            jtblGuestsDis.getColumnModel().getColumn(1).setResizable(false);
            jtblGuestsDis.getColumnModel().getColumn(1).setPreferredWidth(42);
            jtblGuestsDis.getColumnModel().getColumn(2).setResizable(false);
            jtblGuestsDis.getColumnModel().getColumn(2).setPreferredWidth(84);
            jtblGuestsDis.getColumnModel().getColumn(3).setResizable(false);
            jtblGuestsDis.getColumnModel().getColumn(3).setPreferredWidth(84);
            jtblGuestsDis.getColumnModel().getColumn(4).setResizable(false);
            jtblGuestsDis.getColumnModel().getColumn(4).setPreferredWidth(84);
        }

        add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, 620, 500));
    }// </editor-fold>//GEN-END:initComponents


    
    private void butOccRepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butOccRepActionPerformed
        // TODO add your handling code here:
        try{
           
            String sDAte = ftxtFrom.getText();
            String eDAte = ftxtTo.getText();
            String Yearr =  ftxtFromY.getText();
            
            if (sDAte.isEmpty() == true){
                sDAte = LocalDate.now().getYear()+"-01-01";
            }
            if (eDAte.isEmpty() == true){
                eDAte = LocalDate.now().getYear() + "-12-31";
            }
             
            DefaultTableModel dt13 = (DefaultTableModel) jtblGuestsDis.getModel();
            dt13.setRowCount(0);
            Statement s = db1.mycon1().createStatement();
            ResultSet rs =  s.executeQuery("SELECT reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge FROM reservations ORDER BY reservations.room_no WHERE ((reservations.date_start >= '"+ sDAte+"') AND (reservations.date_end >= '"+ eDAte+"' )) ;");
            
            if (rbYearly.isSelected() == true){
                String YrSel = ftxtFromY.getText();
                sDAte = LocalDate.now().getYear() + "-01-01";
                eDAte = LocalDate.now().getYear() + "-12-31";
                rs =  s.executeQuery("SELECT reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge FROM reservations ORDER BY reservations.room_no WHERE ((reservations.date_start >= '" + sDAte + "') AND (reservations.date_end >= '"+ eDAte + "' ));");
            }
            
            if (rbMonthly.isSelected() == true){
                int MonthSel = cmboRepMonths.getSelectedIndex();
                MonthSel = MonthSel +1;
                sDAte = LocalDate.now().getYear()+"-"+ LocalDate.now().getMonthValue() +"-01";
                eDAte = LocalDate.now().getYear()+"-"+ LocalDate.now().getMonthValue() +"-" + LocalDate.now().lengthOfMonth();
                rs =  s.executeQuery("SELECT reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge FROM reservations ORDER BY reservations.room_no WHERE ((reservations.date_start >= '" + sDAte + "') AND (reservations.date_end >= '"+ eDAte + "' ));");
            }
            if (rbDate.isSelected() == true){
                rs =  s.executeQuery("SELECT reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge FROM reservations ORDER BY reservations.room_no WHERE ((reservations.date_start >= '" + sDAte + "') AND (reservations.date_end >= '"+ sDAte + "' )) ;");
            }
            if (rbDates.isSelected() == true){
                rs =  s.executeQuery("SELECT reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge FROM reservations ORDER BY reservations.room_no WHERE ((reservations.date_start >= '" + sDAte + "') AND (reservations.date_end >= '"+ eDAte + "' )) ;");
            }
            while (rs.next()) {              
           
                Vector v = new Vector();    
               
                v.add(rs.getString(1)); //RES id
                v.add(rs.getString(4)); //Datee
                v.add(rs.getString(3)); //REs ID
                v.add(rs.getString(5)); //Room
                v.add(rs.getString(11)); //Method 
                
                taInv.setText(taInv.getText()+"     Room: " + (rs.getString(4)) + "\t  From: " + (String.valueOf(rs.getString(3))) + "       TO: " + (String.valueOf(rs.getString(5))) + "\t   €" + (String.valueOf(rs.getString(11))) + "\n");           
                
               
              
                dt13.addRow(v);
                }
         
         
        } catch (SQLException e) {
            System.out.println(e);
        }
            
    }//GEN-LAST:event_butOccRepActionPerformed

   
    
    private void rbDatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDatesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbDatesActionPerformed

    private void rbDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbDateActionPerformed

    private void rbMonthlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMonthlyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbMonthlyActionPerformed

    private void butOccPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butOccPrintActionPerformed
        try {
                    printComponentToPrinter(pantxxns, true);
                
            } catch (PrinterException exp) {
                 JOptionPane.showMessageDialog(null, "Printing Error","Missing Data Errors" , JOptionPane.ERROR_MESSAGE);
            }
        
        
        
    }//GEN-LAST:event_butOccPrintActionPerformed

    private void rbYearlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbYearlyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbYearlyActionPerformed

    private void jtblGuestsDisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblGuestsDisMouseClicked
        int selRow = jtblGuestsDis.getSelectedRow();
        selTxn = jtblGuestsDis.getValueAt(selRow, 0).toString();
        

    }//GEN-LAST:event_jtblGuestsDisMouseClicked
    
    public void genRep(){
    try{             
            DefaultTableModel dt1 = (DefaultTableModel) jtblGuestsDis.getModel();
            dt1.setRowCount(0);
              
            Statement s1 = db1.mycon1().createStatement();
            ResultSet rs =  s1.executeQuery("SELECT reservations.res_id, reservations.guest_id, reservations.date_start, reservations.room_no, reservations.date_end, reservations.notes, reservations.bill_id, reservations.status, reservations.date_resmade, reservations.txn_id, reservations.charge FROM reservations ORDER BY reservations.room_no;");
          
            while (rs.next()) {              
           
                Vector v = new Vector();    
                 v.add(rs.getString(1)); //RES id
                v.add(rs.getString(4)); //Datee
                v.add(rs.getString(3)); //REs ID
                v.add(rs.getString(5)); //Room
                v.add(rs.getString(11)); //Method 
                
                taInv.setText(taInv.getText()+"     Room: " + (rs.getString(4)) + "\t  From: " + (String.valueOf(rs.getString(3))) + "       TO: " + (String.valueOf(rs.getString(5))) + "\t   €" + (String.valueOf(rs.getString(11))) + "\n");           
                        
                dt1.addRow(v);
              
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
    
    }
    
    public void DateFill(){
            //Run once, hopefully
            String Sdate = LocalDate.now().getYear()+"-01-01";
            String Edate = LocalDate.now().getYear() + "-12-31";
            ftxtFrom.setText(Sdate);
            ftxtTo.setText(Edate);
            int Yearr = LocalDate.now().getYear();
            ftxtFromY.setText (String.valueOf(Yearr)); 
            txtChkin.setText(Sdate);
            txtChkout.setText(Edate);
            txtDateDis.setText( LocalDate.now().getYear() +"-"+ LocalDate.now().getMonthValue() +"-" + LocalDate.now().getDayOfMonth());
        
    }
   public static void printComponentToPrinter(JComponent comp, boolean fill) throws PrinterException {  
        String fileLoc = "";
        Paper paper = new Paper();
        paper.setSize(595, 842);
        paper.setImageableArea(1, 1, 595, 872);
        
        PageFormat pf = new PageFormat();
        pf.setPaper(paper);
       
        BufferedImage img = new BufferedImage(595, 872 ,BufferedImage.SCALE_SMOOTH);

        Graphics2D g2d = img.createGraphics();
        g2d.translate(pf.getImageableX(),pf.getImageableY());
        g2d.scale(1.2, 1);
        
        
        //Graphics2D graphics2D = img.getWidth()
        ComponentPrinter cp = new ComponentPrinter(comp, fill);
        PrinterJob  printJob = PrinterJob.getPrinterJob();

        printJob.setPrintable(cp);
        if(printJob.printDialog()) {
                printJob.print();
            }
            
        
        
        
        
        try {
            cp.print(g2d, pf, 0);
            
            
        } finally {
            g2d.dispose();
        }

        try {
            ImageIO.write(img, "png", new File("INVOICE_" + (LocalDate.now().format(DateTimeFormatter.ISO_DATE))   +".png"));
            fileLoc = ("INVOICE_" + (LocalDate.now().getDayOfMonth() +"-"+ LocalDate.now().getMonthValue() +"-" + LocalDate.now().getYear())   +".png");
        } catch (IOException ex) {
            ex.printStackTrace();
        } 
       
            
        
    }
    
    public static class ComponentPrinter implements Printable {

        private JComponent comp;
        private boolean fill;

        public ComponentPrinter(JComponent comp, boolean fill) {
            this.comp = comp;
            this.fill = fill;
        }

        @Override
        public int print(Graphics g, PageFormat format, int page_index) throws PrinterException {

            if (page_index > 0) {
                return Printable.NO_SUCH_PAGE;
            }
            Paper paperq = new Paper();
            paperq.setSize(595, 872);
            paperq.setImageableArea(1, 1, 595, 872);
        
            PageFormat pf = new PageFormat();
            pf.setPaper(paperq);
            Graphics2D g2 = (Graphics2D) g;
            g2.translate(format.getImageableX(), format.getImageableY());

            double width = (int) Math.floor(format.getImageableWidth());
            double height = (int) Math.floor(format.getImageableHeight());

            if (!fill) {

                width = Math.min(width, comp.getPreferredSize().width) +200;/// HERERERERERER!!!!!!!
                height = Math.min(height, comp.getPreferredSize().height) ;

            }

            comp.setBounds(0, 0, (int) Math.floor(width), (int) Math.floor(height));
            if (comp.getParent() == null) {
                comp.addNotify();
            }
            comp.validate();
            comp.doLayout();
            comp.printAll(g2);
            if (comp.getParent() != null) {
                comp.removeNotify();
            }

            return Printable.PAGE_EXISTS;
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butOccPrint;
    private javax.swing.JButton butOccRep;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JComboBox<String> cmboRepMonths;
    private javax.swing.JFormattedTextField ftxtFrom;
    private javax.swing.JFormattedTextField ftxtFromY;
    private javax.swing.JFormattedTextField ftxtTo;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jtblGuestsDis;
    private javax.swing.JPanel pantxxns;
    private javax.swing.JRadioButton rbDate;
    private javax.swing.JRadioButton rbDates;
    private javax.swing.JRadioButton rbMonthly;
    private javax.swing.JRadioButton rbYearly;
    private javax.swing.JTextPane taInv;
    private javax.swing.JTextField txtChkin;
    private javax.swing.JTextField txtChkout;
    private javax.swing.JTextField txtDateDis;
    private javax.swing.JTextField txtRptHead;
    private javax.swing.JTextField txtRptHead1;
    // End of variables declaration//GEN-END:variables
}
